{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6f33e339",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Phython Exercise:PHP Exercise:\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "text = 'Phython Exercise,PHP Exercise.'\n",
    "print(re.sub(\"[,.]\",\":\",text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b46a9cab",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 3) (2159325745.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[9], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    data={SUMMARY=['hello.world!','XXXX test',123 four,five,six'...]}\u001b[0m\n\u001b[1;37m                                                               ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 3)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "data={SUMMARY=['hello.world!','XXXX test',123 four,five,six'...]}\n",
    "df=pd.DataFrame(data)\n",
    " df['SUMMARY']=df['SUMMARY']apply(lambdax;re.sub(r'[^a-zA-Z\\s]','',x))\n",
    "                 print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "858927de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         SUMMARY\n",
      "0    hello world\n",
      "1     XXXXX test\n",
      "2  four five six\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "\n",
    "\n",
    "data = {'SUMMARY': ['hello, world!', 'XXXXX test', '123four, five:; six...']}\n",
    "\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "df['SUMMARY'] = df['SUMMARY'].apply(lambda x: re.sub(r'[^a-zA-Z\\s]', '', x))\n",
    "\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "336de75c",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (4018782520.py, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[18], line 4\u001b[1;36m\u001b[0m\n\u001b[1;33m    df=pd.DataFrame(data)\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "data={'SUMMARY':['hello,world!','XXXXX test','123:four,five:;six...']}\n",
    "                 df=pd.DataFrame(data)\n",
    "                 defclean_text(text):\n",
    "                 cleaned_text=re.sub(r'[!;:],\",text)\n",
    "                                     cleaned_text= re.sub(r'XXXXX,'',cleaned_text)\n",
    "                                                          cleaned_text=''.join(cleaned_text.split())\n",
    "                                                          return cleaned_text\n",
    "                                                          df['SUMMARY']=df['SUMMARY'].apply(clean_text)\n",
    "                                                          print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2947dcc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['quick', 'brown', 'jumps', 'over', 'lazy']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "text='The quick brown fox jumps over the lazy dog.'\n",
    "print(re.findall(r\"\\b\\w{4,}\\b\",text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5c772fbf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "text='The quick brown fox jumps over the lazy dog.'\n",
    "print(re.findall(r\"\\b\\w{3,5}\\b\",text))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "88f160f0",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 7)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m<tokenize>:7\u001b[1;36m\u001b[0m\n\u001b[1;33m    sample_text=[\"example(.com)\",\"hr@fliprobo(.com)\",\"github(.com)\",\"Hello(Data Science World)\",\"Data(Scientist)\"]\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def remove_parentheses(strings):\n",
    "    pattern=re.compile(r'\\([^]*\\)')\n",
    "    cleaned_strings=[pattern.sub(\",s)for s in strings]\n",
    "                                 return cleaned_strings\n",
    "                                 \n",
    "          sample_text=[\"example(.com)\",\"hr@fliprobo(.com)\",\"github(.com)\",\"Hello(Data Science World)\",\"Data(Scientist)\"]\n",
    "                                 claened_text=remove_parentheses(sample_text)\n",
    "                                 for s in cleaned_text:\n",
    "                                 print(cleaned_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "68aa100a",
   "metadata": {},
   "outputs": [
    {
     "ename": "error",
     "evalue": "unterminated character set at position 2",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31merror\u001b[0m                                     Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[43], line 8\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mopen\u001b[39m(input_file,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m file:\n\u001b[0;32m      7\u001b[0m     text\u001b[38;5;241m=\u001b[39mfile\u001b[38;5;241m.\u001b[39mread()\n\u001b[1;32m----> 8\u001b[0m     cleaned_text\u001b[38;5;241m=\u001b[39m\u001b[43mremove_parentheses\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtext\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      9\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mopen\u001b[39m(output_file,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mw\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m file:\n\u001b[0;32m     10\u001b[0m         file\u001b[38;5;241m.\u001b[39mwrite(claeaned_text)\n",
      "Cell \u001b[1;32mIn[43], line 3\u001b[0m, in \u001b[0;36mremove_parentheses\u001b[1;34m(text)\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mremove_parentheses\u001b[39m(text):\n\u001b[1;32m----> 3\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mre\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msub\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43mr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43m([^]*\u001b[39;49m\u001b[38;5;124;43m\\\u001b[39;49m\u001b[38;5;124;43m)\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43mtext\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\re.py:209\u001b[0m, in \u001b[0;36msub\u001b[1;34m(pattern, repl, string, count, flags)\u001b[0m\n\u001b[0;32m    202\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msub\u001b[39m(pattern, repl, string, count\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m, flags\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m):\n\u001b[0;32m    203\u001b[0m     \u001b[38;5;124;03m\"\"\"Return the string obtained by replacing the leftmost\u001b[39;00m\n\u001b[0;32m    204\u001b[0m \u001b[38;5;124;03m    non-overlapping occurrences of the pattern in string by the\u001b[39;00m\n\u001b[0;32m    205\u001b[0m \u001b[38;5;124;03m    replacement repl.  repl can be either a string or a callable;\u001b[39;00m\n\u001b[0;32m    206\u001b[0m \u001b[38;5;124;03m    if a string, backslash escapes in it are processed.  If it is\u001b[39;00m\n\u001b[0;32m    207\u001b[0m \u001b[38;5;124;03m    a callable, it's passed the Match object and must return\u001b[39;00m\n\u001b[0;32m    208\u001b[0m \u001b[38;5;124;03m    a replacement string to be used.\"\"\"\u001b[39;00m\n\u001b[1;32m--> 209\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_compile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39msub(repl, string, count)\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\re.py:303\u001b[0m, in \u001b[0;36m_compile\u001b[1;34m(pattern, flags)\u001b[0m\n\u001b[0;32m    301\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m sre_compile\u001b[38;5;241m.\u001b[39misstring(pattern):\n\u001b[0;32m    302\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfirst argument must be string or compiled pattern\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m--> 303\u001b[0m p \u001b[38;5;241m=\u001b[39m \u001b[43msre_compile\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcompile\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    304\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (flags \u001b[38;5;241m&\u001b[39m DEBUG):\n\u001b[0;32m    305\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(_cache) \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m _MAXCACHE:\n\u001b[0;32m    306\u001b[0m         \u001b[38;5;66;03m# Drop the oldest item\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\sre_compile.py:788\u001b[0m, in \u001b[0;36mcompile\u001b[1;34m(p, flags)\u001b[0m\n\u001b[0;32m    786\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m isstring(p):\n\u001b[0;32m    787\u001b[0m     pattern \u001b[38;5;241m=\u001b[39m p\n\u001b[1;32m--> 788\u001b[0m     p \u001b[38;5;241m=\u001b[39m \u001b[43msre_parse\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparse\u001b[49m\u001b[43m(\u001b[49m\u001b[43mp\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    789\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m    790\u001b[0m     pattern \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\sre_parse.py:955\u001b[0m, in \u001b[0;36mparse\u001b[1;34m(str, flags, state)\u001b[0m\n\u001b[0;32m    952\u001b[0m state\u001b[38;5;241m.\u001b[39mstr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mstr\u001b[39m\n\u001b[0;32m    954\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m--> 955\u001b[0m     p \u001b[38;5;241m=\u001b[39m \u001b[43m_parse_sub\u001b[49m\u001b[43m(\u001b[49m\u001b[43msource\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstate\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mflags\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m&\u001b[39;49m\u001b[43m \u001b[49m\u001b[43mSRE_FLAG_VERBOSE\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[0;32m    956\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m Verbose:\n\u001b[0;32m    957\u001b[0m     \u001b[38;5;66;03m# the VERBOSE flag was switched on inside the pattern.  to be\u001b[39;00m\n\u001b[0;32m    958\u001b[0m     \u001b[38;5;66;03m# on the safe side, we'll parse the whole thing again...\u001b[39;00m\n\u001b[0;32m    959\u001b[0m     state \u001b[38;5;241m=\u001b[39m State()\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\sre_parse.py:444\u001b[0m, in \u001b[0;36m_parse_sub\u001b[1;34m(source, state, verbose, nested)\u001b[0m\n\u001b[0;32m    442\u001b[0m start \u001b[38;5;241m=\u001b[39m source\u001b[38;5;241m.\u001b[39mtell()\n\u001b[0;32m    443\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m:\n\u001b[1;32m--> 444\u001b[0m     itemsappend(\u001b[43m_parse\u001b[49m\u001b[43m(\u001b[49m\u001b[43msource\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstate\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mverbose\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnested\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m    445\u001b[0m \u001b[43m                       \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mnested\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mand\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mnot\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mitems\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[0;32m    446\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m sourcematch(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m|\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[0;32m    447\u001b[0m         \u001b[38;5;28;01mbreak\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\sre_parse.py:550\u001b[0m, in \u001b[0;36m_parse\u001b[1;34m(source, state, verbose, nested, first)\u001b[0m\n\u001b[0;32m    548\u001b[0m this \u001b[38;5;241m=\u001b[39m sourceget()\n\u001b[0;32m    549\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m this \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m--> 550\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m source\u001b[38;5;241m.\u001b[39merror(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124munterminated character set\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    551\u001b[0m                        source\u001b[38;5;241m.\u001b[39mtell() \u001b[38;5;241m-\u001b[39m here)\n\u001b[0;32m    552\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m this \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mset\u001b[39m:\n\u001b[0;32m    553\u001b[0m     \u001b[38;5;28;01mbreak\u001b[39;00m\n",
      "\u001b[1;31merror\u001b[0m: unterminated character set at position 2"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def remove_parentheses(text):\n",
    "    return re.sub(r'\\([^]*\\)','',text)\n",
    "input_file=\"sample_text.txt\"\n",
    "output_file=\"cleaned_text.txt\"\n",
    "with open(input_file,\"r\") as file:\n",
    "    text=file.read()\n",
    "    cleaned_text=remove_parentheses(text)\n",
    "    with open(output_file,\"w\") as file:\n",
    "        file.write(claeaned_text)\n",
    "        print(\"Parentheses removed and cleaned text saved to\",output_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "70fb6f84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "IOREIP\n"
     ]
    }
   ],
   "source": [
    " import re\n",
    "text = \"ImportanceOfRegularExpressionsInPython\"\n",
    "uppercase_letters = re.findall(r'[A-Z]', text)\n",
    "result = ''.join(uppercase_letters)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "58dc1ccd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RegularExpression1 IsAn2 ImportantTopic3 InPython\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def insert_spaces_between_words_with_numbers(text):\n",
    "    modified_text = re.sub(r'(\\d)([A-Z][a-z]+)', r'\\1 \\2', text)\n",
    "    return modified_text\n",
    "sample_text = \"RegularExpression1IsAn2ImportantTopic3InPython\"\n",
    "result = insert_spaces_between_words_with_numbers(sample_text)\n",
    "print(result)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "570ef941",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (3708799335.py, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[52], line 4\u001b[1;36m\u001b[0m\n\u001b[1;33m    return modified_text\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def insert_spaces_between_words(text):\n",
    "   modified_text = re.sub(r'(\\d|[A-Z])([A-Z][a-z]+)', r'\\1 \\2', text)\n",
    "    return modified_text\n",
    "sample_text = \"RegularExpression1IsAn2ImportantTopic3InPython\"\n",
    "result = insert_spaces_between_words(sample_text)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "f16be32d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'Valid_String_123' is a valid string.\n",
      "'Invalid String!' is not a valid string.\n",
      "'Another@Valid_One' is not a valid string.\n",
      "'12345' is a valid string.\n",
      "'' is not a valid string.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def is_valid_string(s):\n",
    "    pattern = re.compile(r'^[a-zA-Z0-9_]+$')\n",
    "    return bool(pattern.match(s))\n",
    "strings = [\"Valid_String_123\", \"Invalid String!\", \"Another@Valid_One\", \"12345\", \"\"]\n",
    "for s in strings:\n",
    "    if is_valid_string(s):\n",
    "        print(f\"'{s}' is a valid string.\")\n",
    "    else:\n",
    "        print(f\"'{s}' is not a valid string.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "47c19769",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"12345abc\" starts with the specific number \"123\".\n",
      "\"456def\" does not start with the specific number \"123\".\n",
      "\"xyz123\" does not start with the specific number \"123\".\n"
     ]
    }
   ],
   "source": [
    "def starts_with_number(input_string, specific_number):\n",
    "    return input_string.startswith(specific_number)\n",
    "specific_number = \"123\"\n",
    "test_strings = [\"12345abc\", \"456def\", \"xyz123\"]\n",
    "for string in test_strings:\n",
    "    if starts_with_number(string, specific_number):\n",
    "        print(f'\"{string}\" starts with the specific number \"{specific_number}\".')\n",
    "    else:\n",
    "        print(f'\"{string}\" does not start with the specific number \"{specific_number}\".')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "ca54cf4c",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (1407705813.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[55], line 5\u001b[1;36m\u001b[0m\n\u001b[1;33m    return cleaned_ip\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def remove_leading_zeros(ip_address):\n",
    "     pattern = r'\\b0+(\\d+)\\b'\n",
    "cleaned_ip = re.sub(pattern, r'\\1', ip_address)\n",
    "    return cleaned_ip\n",
    "ip_address = \"192.001.003.010\"\n",
    "cleaned_ip = remove_leading_zeros(ip_address)\n",
    "print(f\"Original IP address: {ip_address}\")\n",
    "print(f\"Cleaned IP address: {cleaned_ip}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "2fbe219f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original IP address: 192.001.003.010\n",
      "Cleaned IP address: 192.1.3.10\n"
     ]
    }
   ],
   "source": [
    "def remove_leading_zeros(ip_address):\n",
    "\n",
    "    pattern = r'\\b0+(\\d+)\\b'\n",
    "    \n",
    "    cleaned_ip = re.sub(pattern, r'\\1', ip_address)\n",
    "    return cleaned_ip\n",
    "\n",
    "ip_address = \"192.001.003.010\"\n",
    "cleaned_ip = remove_leading_zeros(ip_address)\n",
    "\n",
    "print(f\"Original IP address: {ip_address}\")\n",
    "print(f\"Cleaned IP address: {cleaned_ip}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "234b8670",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after function definition on line 2 (1022373775.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[57], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    modified_text = re.sub(r'(\\d|[A-Z])([A-Z][a-z]+)', r'\\1 \\2', text)\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after function definition on line 2\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def insert_spaces_between_words(text):\n",
    "modified_text = re.sub(r'(\\d|[A-Z])([A-Z][a-z]+)', r'\\1 \\2', text)\n",
    "    return modified_text\n",
    "sample_text = \"RegularExpression1IsAn2ImportantTopic3InPython\"\n",
    "result = insert_spaces_between_words(sample_text)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "34b13f60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "August 15th 1947\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "with open(\"sample_text.txt\", \"r\") as file:\n",
    "    text = file.read()\n",
    "pattern = r'(\\b(?:January|February|March|April|May|June|July|August|September|October|November|December)\\s+\\d{1,2}(?:th|st|nd|rd)?\\s+\\d{4}\\b)'\n",
    "# Use re.findall() to find all date strings that match the pattern\n",
    "dates = re.findall(pattern, text)\n",
    "for date in dates:\n",
    "    print(date)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "4d7eb432",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"fox\"\n",
      "\"dog\"\n",
      "\"horse\"\n"
     ]
    }
   ],
   "source": [
    "input_string = 'The quick brown fox jumps over the lazy dog.'\n",
    "search_strings = ['fox', 'dog', 'horse']\n",
    "for search_string in search_strings:\n",
    "    if search_string in input_string:\n",
    "        print(f'\"{search_string}\"')\n",
    "    else:\n",
    "        print(f'\"{search_string}\"')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "46b085c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"fox\" found in the input string at index 16.\n"
     ]
    }
   ],
   "source": [
    "input_string = 'The quick brown fox jumps over the lazy dog.'\n",
    "search_string = 'fox'\n",
    "found_index = input_string.find(search_string)\n",
    "if found_index != -1:\n",
    "    print(f'\"{search_string}\" found in the input string at index {found_index}.')\n",
    "else:\n",
    "    print(f'\"{search_string}\" not found in the input string.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "6c2122f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found \"exercises\" at index 7.\n",
      "Found \"exercises\" at index 22.\n",
      "Found \"exercises\" at index 36.\n",
      "Found \"Python\" at index 0.\n",
      "Found \"PHP\" at index 18.\n",
      "Found \"C#\" at index 33.\n"
     ]
    }
   ],
   "source": [
    "input_string = 'Python exercises, PHP exercises, C# exercises'\n",
    "substrings = ['exercises', 'Python', 'PHP', 'C#', 'Java']\n",
    "for substring in substrings:\n",
    "    start_index = 0\n",
    "    while start_index < len(input_string):\n",
    "        start_index = input_string.find(substring, start_index)\n",
    "        if start_index == -1:\n",
    "            break\n",
    "        print(f'Found \"{substring}\" at index {start_index}.')\n",
    "        start_index += len(substring)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "2b4c87b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"exercises\" found 3 times at positions: [7, 22, 36]\n",
      "\"Python\" found 1 times at positions: [0]\n",
      "\"PHP\" found 1 times at positions: [18]\n",
      "\"C#\" found 1 times at positions: [33]\n",
      "\"Java\" not found in the input string.\n"
     ]
    }
   ],
   "source": [
    "def find_occurrences(input_string, substring):\n",
    "    positions = []\n",
    "    start_index = 0\n",
    "    while start_index < len(input_string):\n",
    "        start_index = input_string.find(substring, start_index)\n",
    "        if start_index == -1:\n",
    "            break\n",
    "        positions.append(start_index)\n",
    "        start_index += len(substring)\n",
    "    return positions\n",
    "input_string = 'Python exercises, PHP exercises, C# exercises'\n",
    "substrings = ['exercises', 'Python', 'PHP', 'C#', 'Java']\n",
    "for substring in substrings:\n",
    "    positions = find_occurrences(input_string, substring)\n",
    "    if positions:\n",
    "        print(f'\"{substring}\" found {len(positions)} times at positions: {positions}')\n",
    "    else:\n",
    "        print(f'\"{substring}\" not found in the input string.')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "42fcfd27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original date: 2023-10-31\n",
      "Converted date: 31-10-2023\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "date_string = \"2023-10-31\"\n",
    "date_object = datetime.strptime(date_string, \"%Y-%m-%d\")\n",
    "formatted_date = date_object.strftime(\"%d-%m-%Y\")\n",
    "print(f\"Original date: {date_string}\")\n",
    "print(f\"Converted date: {formatted_date}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "6fa8d82f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['01.12', '145.8', '27.25', '0.25']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def find_decimal_numbers_with_precision(text):\n",
    "    pattern=re.compile(r'\\b\\d+\\.\\d{1,2}\\b')\n",
    "    decimal_numbers= pattern.findall(text)\n",
    "    return decimal_numbers\n",
    "sample_text=\"01.12 0132.123 2.31875 145.8 3. 27.25 0.25\"\n",
    "result= find_decimal_numbers_with_precision(sample_text)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "a0cb5ac7",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m<tokenize>:4\u001b[1;36m\u001b[0m\n\u001b[1;33m    matches = list(pattern.finditer(text))\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def find_numbers_with_positions(text):\n",
    "    pattern = re.compile(r'\\d+')\n",
    " match = list(pattern.finditer(text))\n",
    "    for match in matches:\n",
    "        number = match.group()\n",
    "        start = match.start()\n",
    "        end = match.end()\n",
    "        print(f\"Number: {number}, Position: {start}-{end-1}\")\n",
    "sample_text = \"The price of the product is $25.99, and the quantity is 10.\"\n",
    "find_numbers_with_positions(sample_text)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "3aa57a6f",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (260955370.py, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[73], line 4\u001b[1;36m\u001b[0m\n\u001b[1;33m    matches = re.finditer(pattern, text)\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def find_numbers_and_positions(text):\n",
    " pattern = re.compile(r'\\d+')\n",
    "    matches = re.finditer(pattern, text)\n",
    "for match in matches:\n",
    "        number = match.group()  \n",
    "        position = match.start() \n",
    "        print(f\"Number: {number}, Position: {position}\")\n",
    "input_string = \"This is a sample string with numbers: 123 and 456789.\"\n",
    "find_numbers_and_positions(input_string)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "214de5eb",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (2024191681.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[75], line 5\u001b[1;36m\u001b[0m\n\u001b[1;33m    matches = re.finditer(pattern, text)\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "find_numbers_with_positions(sample_text)\n",
    "import re\n",
    "def find_numbers_and_positions(text):\n",
    " pattern = r'\\d+'\n",
    "    matches = re.finditer(pattern, text)\n",
    "for match in matches:\n",
    "        number = match.group()  # Get the matched number\n",
    "        position = match.start()  # Get the starting position of the match\n",
    "        print(f\"Number: {number}, Position: {position}\")\n",
    "input_string = \"This is a sample string with numbers: 123 and 456789.\"\n",
    "find_numbers_and_positions(input_string)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "89271b02",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number: 25, Position: 29-30\n",
      "Number: 99, Position: 32-33\n",
      "Number: 10, Position: 56-57\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def find_numbers_with_positions(text):\n",
    "\n",
    "    pattern = re.compile(r'\\d+')\n",
    "\n",
    "    matches = list(pattern.finditer(text))\n",
    "\n",
    "    \n",
    "    for match in matches:\n",
    "        number = match.group()\n",
    "        start = match.start()\n",
    "        end = match.end()\n",
    "        print(f\"Number: {number}, Position: {start}-{end-1}\")\n",
    "\n",
    "\n",
    "sample_text = \"The price of the product is $25.99, and the quantity is 10.\"\n",
    "\n",
    "\n",
    "find_numbers_with_positions(sample_text)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "39c262a2",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after 'else' statement on line 8 (3035988473.py, line 9)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[80], line 9\u001b[1;36m\u001b[0m\n\u001b[1;33m    return None\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after 'else' statement on line 8\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def extract_max_numeric_value(text):\n",
    "    pattern = r'\\d+'\n",
    "    numeric_values = [int(match) for match in re.findall(pattern, text)]\n",
    "    if numeric_values:\n",
    "        max_value = max(numeric_values)\n",
    "        return max_value\n",
    "    else:\n",
    "    return None\n",
    "sample_text = 'My marks in each semester are: 947, 896, 926, 524, 734, 950, 642'\n",
    "max_numeric_value = extract_max_numeric_value(sample_text)\n",
    "if max_numeric_value is not None:\n",
    "    print(f\"The maximum numeric value in the text is: {max_numeric_value}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "7bc355c5",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (1068360157.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[78], line 5\u001b[1;36m\u001b[0m\n\u001b[1;33m    if numeric_values:\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def extract_max_numeric_value(text):\n",
    "  pattern = r'\\d+'\n",
    "numeric_values = [int(match) for match in re.findall(pattern, text)]\n",
    "    if numeric_values:\n",
    "        max_value = max(numeric_values)\n",
    "        return max_value\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "sample_text = 'My marks in each semester are: 947, 896, 926, 524, 734, 950, 642'\n",
    "\n",
    "max_numeric_value = extract_max_numeric_value(sample_text)\n",
    "\n",
    "if max_numeric_value is not None:\n",
    "    print(f\" {max_numeric_value}\")\n",
    "else:\n",
    "    print(\"No numeric values found in the text.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "f17251cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 950\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def extract_max_numeric_value(text):\n",
    "  \n",
    "    pattern = r'\\d+'\n",
    "   \n",
    "    numeric_values = [int(match) for match in re.findall(pattern, text)]\n",
    "    if numeric_values:\n",
    "        max_value = max(numeric_values)\n",
    "        return max_value\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "sample_text = 'My marks in each semester are: 947, 896, 926, 524, 734, 950, 642'\n",
    "\n",
    "max_numeric_value = extract_max_numeric_value(sample_text)\n",
    "\n",
    "if max_numeric_value is not None:\n",
    "    print(f\" {max_numeric_value}\")\n",
    "else:\n",
    "    print(\"No numeric values found in the text.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "1aca18c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Regular Expression Is An Important Topic In Python\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def insert_spaces_between_capital_words(text):\n",
    "    modified_text = re.sub(r'([a-z])([A-Z])', r'\\1 \\2', text)\n",
    "    return modified_text\n",
    "sample_text = \"RegularExpressionIsAnImportantTopicInPython\"\n",
    "result = insert_spaces_between_capital_words(sample_text)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "b21d9c91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This\n",
      "Sample\n",
      "Text\n",
      "Multiple\n",
      "Uppercase\n",
      "Sequences\n",
      "Bc\n",
      "Zab\n",
      "Def\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "sample_text = \"This is a Sample Text with Multiple Uppercase Sequences: ABc, XYZabC, abcDefG\"\n",
    "pattern = r'[A-Z][a-z]+'\n",
    "sequences = re.findall(pattern, sample_text)\n",
    "for sequence in sequences:\n",
    "    print(sequence)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "7f5e19f3",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (397577778.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[83], line 5\u001b[1;36m\u001b[0m\n\u001b[1;33m    return =cleaned_sentence\u001b[0m\n\u001b[1;37m           ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def remove_continuous_duplicates(sentence):\n",
    "    pattern = r'\\b(\\w+)(\\s+\\1)+\\b'\n",
    "    cleaned_sentence = re.sub(pattern, r'\\1', sentence)\n",
    "return =cleaned_sentence\n",
    "sample_text = \"Hello hello world world\"\n",
    "result = remove_continuous_duplicates(sample_text)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "326cf530",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m<tokenize>:4\u001b[1;36m\u001b[0m\n\u001b[1;33m    return cleaned_text\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def remove_continuous_duplicates(input_text):\n",
    "    cleaned_text = re.sub(r'\\b(\\w+)\\s+\\1\\b', r'\\1', input_text, flags=re.IGNORECASE)\n",
    "  return cleaned_text\n",
    "sample_text = \"Hello hello world world\"\n",
    "cleaned_text = remove_continuous_duplicates(sample_text)\n",
    "print(cleaned_text)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "0711ccf3",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (4047368935.py, line 6)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[95], line 6\u001b[1;36m\u001b[0m\n\u001b[1;33m    return\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def is_string_ending_with_alphanumeric(input_string):\n",
    "    pattern = re.compile(r'^.*[a-zA-Z0-9]$')\n",
    "    match = pattern.match(input_string)\n",
    "\n",
    "        return \n",
    "    else:\n",
    "        return False\n",
    "test_strings = [\"Hello123\", \"Goodbye!\", \"Testing1234\", \"1234\"]\n",
    "for string in test_strings:\n",
    "    if is_string_ending_with_alphanumeric(string):\n",
    "        print(f'\"{string}\" ends with an alphanumeric character.')\n",
    "            else:\n",
    "        print(f'\"{string}\" does not end with an alphanumeric character.')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "8ed2b0a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello hello world\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def remove_continuous_duplicates(sentence):\n",
    "   \n",
    "    pattern = r'\\b(\\w+)(\\s+\\1)+\\b'\n",
    "\n",
    "  \n",
    "    cleaned_sentence = re.sub(pattern, r'\\1', sentence)\n",
    "\n",
    "    return cleaned_sentence\n",
    "\n",
    "\n",
    "sample_text = \"Hello hello world world\"\n",
    "\n",
    "\n",
    "result = remove_continuous_duplicates(sample_text)\n",
    "\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "6a6feae5",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m<tokenize>:5\u001b[1;36m\u001b[0m\n\u001b[1;33m    return bool(pattern.match(s))\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def is_valid_string(s):\n",
    "    pattern = re.compile(r'^[a-zA-Z0-9_]+$')\n",
    "  return bool(pattern.match(s))\n",
    "strings = [\"Valid_String_123\", \"Invalid String!\", \"Another@Valid_One\", \"12345\", \"\"]\n",
    "\n",
    "for s in strings:\n",
    "    if is_valid_string(s):\n",
    "        print(f\"'{s}' is a valid string.\")\n",
    "    else:\n",
    "        print(f\"'{s}' is not a valid string.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "ec08f894",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m<tokenize>:5\u001b[1;36m\u001b[0m\n\u001b[1;33m    return hashtags\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def extract_hashtags(text):\n",
    "pattern = r'#\\w+'\n",
    "    hashtags = re.findall(pattern, text)\n",
    " return hashtags\n",
    "sample_text = \"\"\"RT @kapil_kausik: #Doltiwal I mean #xyzabc is \"hurt\" by #Demonetization as the same has rendered USELESS <ed><U+00A0><U+00BD><ed><U+00B1><U+0089> \"acquired funds\" No wo\"\"\"\n",
    "result = extract_hashtags(sample_text)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "63456a58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['#Doltiwal', '#xyzabc', '#Demonetization']\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def extract_hashtags(text):\n",
    "  \n",
    "    pattern = r'#\\w+'\n",
    "\n",
    "   \n",
    "    hashtags = re.findall(pattern, text)\n",
    "\n",
    "    return hashtags\n",
    "\n",
    "\n",
    "sample_text = \"\"\"RT @kapil_kausik: #Doltiwal I mean #xyzabc is \"hurt\" by #Demonetization as the same has rendered USELESS <ed><U+00A0><U+00BD><ed><U+00B1><U+0089> \"acquired funds\" No wo\"\"\"\n",
    "\n",
    "\n",
    "result = extract_hashtags(sample_text)\n",
    "\n",
    "\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "85d9125f",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m<tokenize>:5\u001b[1;36m\u001b[0m\n\u001b[1;33m    return cleaned_text\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def remove_u_plus_symbols(text):\n",
    "    pattern = r'<U\\+[\\dA-Fa-f]+>'\n",
    "    cleaned_text = re.sub(pattern, '', text)\n",
    " return cleaned_text\n",
    "sample_text = \"@Jags123456 Bharat band on 28??<ed><U+00A0><U+00BD><ed><U+00B8><U+0082>Those who are protesting #demonetization are all different party leaders\"\n",
    "result = remove_u_plus_symbols(sample_text)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "42a966f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "@Jags123456 Bharat band on 28??<ed><ed>Those who are protesting #demonetization are all different party leaders\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def remove_u_plus_symbols(text):\n",
    "  \n",
    "    pattern = r'<U\\+[\\dA-Fa-f]+>'\n",
    "\n",
    "   \n",
    "    cleaned_text = re.sub(pattern, '', text)\n",
    "\n",
    "    return cleaned_text\n",
    "\n",
    "\n",
    "sample_text = \"@Jags123456 Bharat band on 28??<ed><U+00A0><U+00BD><ed><U+00B8><U+0082>Those who are protesting #demonetization are all different party leaders\"\n",
    "\n",
    "\n",
    "result = remove_u_plus_symbols(sample_text)\n",
    "\n",
    "\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "713dfbf3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12-09-1992\n",
      "15-12-1999\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def extract_dates_from_text(filename):\n",
    "    dates = []\n",
    "    pattern = r'\\d{2}-\\d{2}-\\d{4}'\n",
    "\n",
    "    try:\n",
    "        with open(filename, 'r') as file:\n",
    "            text = file.read()\n",
    "            dates = re.findall(pattern, text)\n",
    "    except FileNotFoundError:\n",
    "        print(f\"File '{filename}' not found.\")\n",
    "    return dates\n",
    "file_path = 'your_file.txt'\n",
    "date_list = extract_dates_from_text(file_path)\n",
    "for date in date_list:\n",
    "    print(date)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "48eb5288",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " following example creates  ArrayList  a capacity   elements. 4 elements   added   ArrayList   ArrayList  trimmed accordingly.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "def remove_words_between_lengths(text):\n",
    "    pattern = re.compile(r'\\b\\w{2,4}\\b')\n",
    "\n",
    "    cleaned_text = pattern.sub('', text)\n",
    "\n",
    "    return cleaned_text\n",
    "sample_text = \"The following example creates an ArrayList with a capacity of 50 elements. 4 elements are then added to the ArrayList and the ArrayList is trimmed accordingly.\"\n",
    "\n",
    "result = remove_words_between_lengths(sample_text)\n",
    "print(result)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "764c65c6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

